{
  "hash": "5b615ba9e7b57c73e2c904defd263601",
  "result": {
    "markdown": "---\ntitle: World Cup 2022 Fatigue\ndescription: Assessing the impact of the World Cup on the Premier League\ndate: 12-27-2022\ncategories:\n  - python\n  - pandas\n  - matplotlib\n  - data-viz\n  - football\n  - world cup\nimage: worldcup.png\nformat:\n  html:\n    toc: true\n    toc-location: left\n    number-sections: true\n    code-line-numbers: true\n    fig-width: 7\n    fig-height: 5\n---\n\n::: {.column-screen}\n![The final product](./barh_plot.png)\n:::\nThe 2022 World Cup in Qatar was the first to be held during the winter months in the Premier League to avoid the intense heat of the Middle Eastern summer, so the Premier League season was put on hold accomodate for this. With only a week break between the end of the World Cup and the restart of the Premier League, it's clear that some players and clubs will be impacted more than others, depending on how many games they played during the international tournament. \n\nThis post aims to explore the impact of the World Cup on the Premier League.\n\n# Data Sources\n\nIn a [previous post](../CL19-strangers/avail-heatmaps.ipynb) exploring the strange fact about the 2019 Champions League Final, [transfermarkt](https://www.transfermarkt.com) was used as the data source by scraping webpages for players and teams. The same data source and libraries will be used here, but some changes are necessary to ensure we get the right level of granularity to ensure we canextract insights at the right level.\n\nYou can check out the transfermarkt scraping code [here](https://www.github.com/ismailmo1/football-data-viz).\n\n# Extracting World Cup data\n\nThe key data for this analysis lies within transfermarkt's pages for the games played during the World Cup. Our previous scraping functionality was designed to only extract player availability so we'll need to tweak some of the scraping code so we can get the minutes played for each game.\n\nYou can view the changes made in the commit [on github](https://github.com/ismailmo1/football-data-viz/commit/27f58d4597653919c64f6db6895bbf34279822f7).\n\n\nOnce we have a list of all matches played by a player, we need to extract the minutes played. Unfortunately the data for each player is on a seperate page, so to aggregate data for a club, we have to make a request for each one.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Scraping world cup minutes data\"}\nfrom datetime import datetime\nimport pandas as pd\n\ndef get_world_cup_minutes(\n        team_url:str, \n        world_cup_start = datetime(2022,11,20),\n        world_cup_end = datetime(2022,12,18)\n    )-> pd.DataFrame:\n\n    team_players = teams.get_players(team_url)\n    # build url of player to scrape data from\n    team_player_urls = {player:\"https://www.transfermarkt.com\" + url for player,url in team_players.items()}\n\n    # grab all player's matches\n    team_minutes_played = []\n    \n    for player,url in team_player_urls.items():\n        print(\"grabbing data for: \" + player)\n        match_data = players.get_match_data(url,world_cup_year)\n        # possibility of player not playing any games \n        if match_data is None:\n            continue\n        min_played = players.get_minutes_played(match_data)\n        # add player_name column so we can identify rows when we concatenate\n        min_played['player_name'] = player\n        team_minutes_played.append(min_played)\n\n    all_minutes_played= pd.concat(team_minutes_played)\n\n    \n\n    world_cup_minutes = all_minutes_played.loc[all_minutes_played['Date'].between(world_cup_start, world_cup_end)]\n\n    return world_cup_minutes\n```\n:::\n\n\nWe can now use this function to extract data for each Premier league team: \n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# for some reason transfr market lists world cup on 2021 page\nworld_cup_year= \"2021\"\n\n# get 2022 premier league clubs\nprem_clubs_22 = leagues.get_prem_club_list(season=\"2022\")\n\nprem_world_cup_minutes = {}\n\nfor club,url in prem_clubs_22.items():\n    team_minutes = get_world_cup_minutes(url)\n    prem_world_cup_minutes[club] = team_minutes\n    # add club name so we can identify rows by club when we concatenate rows\n    team_minutes[\"club\"] = club\n\nprem_world_cup_minutes_df = pd.concat(prem_world_cup_minutes.values())\n```\n:::\n\n\nFinally we have our complete dataset that we can play around with!\n\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nprem_world_cup_minutes_df.sample(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Matchday</th>\n      <th>Home team.1</th>\n      <th>Away team.1</th>\n      <th>Result</th>\n      <th>min_played</th>\n      <th>subbed_on</th>\n      <th>subbed_off</th>\n      <th>player_name</th>\n      <th>club</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>2022-11-27</td>\n      <td>Group E</td>\n      <td>Spain</td>\n      <td>Germany</td>\n      <td>1:1</td>\n      <td>0</td>\n      <td>on the bench</td>\n      <td>on the bench</td>\n      <td>César Azpilicueta</td>\n      <td>Chelsea FC</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2022-11-29</td>\n      <td>Group A</td>\n      <td>Ecuador</td>\n      <td>Senegal</td>\n      <td>1:2</td>\n      <td>90</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Pervis Estupiñán</td>\n      <td>Brighton &amp; Hove Albion</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2022-11-25</td>\n      <td>Group A</td>\n      <td>Qatar</td>\n      <td>Senegal</td>\n      <td>1:3</td>\n      <td>90</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Kalidou Koulibaly</td>\n      <td>Chelsea FC</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>2022-11-21</td>\n      <td>Group B</td>\n      <td>England</td>\n      <td>Iran</td>\n      <td>6:2</td>\n      <td>90</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>John Stones</td>\n      <td>Manchester City</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2022-12-10</td>\n      <td>Quarter-Finals</td>\n      <td>Morocco</td>\n      <td>Portugal</td>\n      <td>1:0</td>\n      <td>79</td>\n      <td>NaN</td>\n      <td>79'</td>\n      <td>Diogo Dalot</td>\n      <td>Manchester United</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n# Data processing\nNow that the data is normalised, we can run some sense checks to ensure the data is what we expect. \n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nprem_world_cup_minutes_df['player_name'].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nLucas Digne            7\nMateo Kovacic          7\nRaphaël Varane         7\nN'Golo Kanté           7\nHakim Ziyech           7\n                      ..\nThomas Partey          3\nTariq Lamptey          3\nWout Faes              3\nArmel Bella-Kotchap    3\nPhilip Billing         3\nName: player_name, Length: 150, dtype: int64\n```\n:::\n:::\n\n\nThis passes the eye test: Digne (France) and Kovacic (Croatia) both played all games in the World Cup since they got to the final and third place playoff, and unfortunately for Billing (Denmark) and Bella-Kotchap (Germany), their teams were knocked out at the group stage after playing only 3 games.\n\n## Adding country name\nThe data doesn't contain the name of the country, although we can get this data by scraping more webpages it isn't ideal since we have to make more requests which is slow and writing more code to scrape this data isn't fun or productive. \n\nWe do have the data for each game played by the player, so a hacky way to get the team name is to calculate the mode of the teams in the subset of data for that player. I.e. for Lucas Digne (France), here are all the games played by him:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nprem_world_cup_minutes_df[prem_world_cup_minutes_df['player_name'] ==\"Lucas Digne\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Matchday</th>\n      <th>Home team.1</th>\n      <th>Away team.1</th>\n      <th>Result</th>\n      <th>min_played</th>\n      <th>subbed_on</th>\n      <th>subbed_off</th>\n      <th>player_name</th>\n      <th>club</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2022-11-22</td>\n      <td>Group D</td>\n      <td>France</td>\n      <td>Australia</td>\n      <td>4:1</td>\n      <td>0</td>\n      <td>Not in squad</td>\n      <td>Not in squad</td>\n      <td>Lucas Digne</td>\n      <td>Aston Villa</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2022-11-26</td>\n      <td>Group D</td>\n      <td>France</td>\n      <td>Denmark</td>\n      <td>2:1</td>\n      <td>0</td>\n      <td>Not in squad</td>\n      <td>Not in squad</td>\n      <td>Lucas Digne</td>\n      <td>Aston Villa</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2022-11-30</td>\n      <td>Group D</td>\n      <td>Tunisia</td>\n      <td>France</td>\n      <td>1:0</td>\n      <td>0</td>\n      <td>Not in squad</td>\n      <td>Not in squad</td>\n      <td>Lucas Digne</td>\n      <td>Aston Villa</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2022-12-04</td>\n      <td>Round of 16</td>\n      <td>France</td>\n      <td>Poland</td>\n      <td>3:1</td>\n      <td>0</td>\n      <td>Not in squad</td>\n      <td>Not in squad</td>\n      <td>Lucas Digne</td>\n      <td>Aston Villa</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2022-12-10</td>\n      <td>Quarter-Finals</td>\n      <td>England</td>\n      <td>France</td>\n      <td>1:2</td>\n      <td>0</td>\n      <td>Not in squad</td>\n      <td>Not in squad</td>\n      <td>Lucas Digne</td>\n      <td>Aston Villa</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2022-12-14</td>\n      <td>Semi-Finals</td>\n      <td>France</td>\n      <td>Morocco</td>\n      <td>2:0</td>\n      <td>0</td>\n      <td>Not in squad</td>\n      <td>Not in squad</td>\n      <td>Lucas Digne</td>\n      <td>Aston Villa</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2022-12-18</td>\n      <td>Final</td>\n      <td>Argentina</td>\n      <td>France</td>\n      <td>7:5 on pens</td>\n      <td>0</td>\n      <td>Not in squad</td>\n      <td>Not in squad</td>\n      <td>Lucas Digne</td>\n      <td>Aston Villa</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe can see that France show up the most in the `Home team.1` and `Away team.1` columns, so we can use this to calculate which team he plays for.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nprem_world_cup_minutes_df[prem_world_cup_minutes_df['player_name'] ==\"Lucas Digne\"][['Home team.1', 'Away team.1']].values\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\narray([['France', 'Australia'],\n       ['France', 'Denmark'],\n       ['Tunisia', 'France'],\n       ['France', 'Poland'],\n       ['England', 'France'],\n       ['France', 'Morocco'],\n       ['Argentina', 'France']], dtype=object)\n```\n:::\n:::\n\n\nSince the team names are spread across two columns, we first convert this into a 2D `numpy.array` \n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nteams = prem_world_cup_minutes_df[\n    prem_world_cup_minutes_df['player_name'] ==\"Lucas Digne\"\n    ][\n        ['Home team.1', 'Away team.1']\n        ].values.flatten()\nteams\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\narray(['France', 'Australia', 'France', 'Denmark', 'Tunisia', 'France',\n       'France', 'Poland', 'England', 'France', 'France', 'Morocco',\n       'Argentina', 'France'], dtype=object)\n```\n:::\n:::\n\n\nAnd then flatten it so its a 1D array (like a list) and we can calculate the mode\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\npd.DataFrame(teams).mode().iloc[0,0]\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n'France'\n```\n:::\n:::\n\n\nWe can applying this to the full dataset with `DataFrame.apply` and then merge it with the original dataset so we have an extra `country` column.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nplayer_countries = prem_world_cup_minutes_df.groupby(\"player_name\").apply(lambda df: pd.DataFrame(df[['Home team.1', 'Away team.1']].values.flatten()).mode())\nplayer_countries = player_countries.reset_index().drop(\"level_1\", axis=1).rename({0:'country'}, axis=1)\nprem_world_cup_minutes_df = prem_world_cup_minutes_df.merge(player_countries, how='left', left_on=\"player_name\", right_on=\"player_name\")\nprem_world_cup_minutes_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Matchday</th>\n      <th>Home team.1</th>\n      <th>Away team.1</th>\n      <th>Result</th>\n      <th>min_played</th>\n      <th>subbed_on</th>\n      <th>subbed_off</th>\n      <th>player_name</th>\n      <th>club</th>\n      <th>country</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2022-11-24</td>\n      <td>Group G</td>\n      <td>Switzerland</td>\n      <td>Cameroon</td>\n      <td>1:0</td>\n      <td>90</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Manuel Akanji</td>\n      <td>Manchester City</td>\n      <td>Switzerland</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2022-11-28</td>\n      <td>Group G</td>\n      <td>Brazil</td>\n      <td>Switzerland</td>\n      <td>1:0</td>\n      <td>90</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Manuel Akanji</td>\n      <td>Manchester City</td>\n      <td>Switzerland</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2022-12-02</td>\n      <td>Group G</td>\n      <td>Serbia</td>\n      <td>Switzerland</td>\n      <td>2:3</td>\n      <td>90</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Manuel Akanji</td>\n      <td>Manchester City</td>\n      <td>Switzerland</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2022-12-06</td>\n      <td>Round of 16</td>\n      <td>Portugal</td>\n      <td>Switzerland</td>\n      <td>6:1</td>\n      <td>90</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Manuel Akanji</td>\n      <td>Manchester City</td>\n      <td>Switzerland</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2022-11-24</td>\n      <td>Group H</td>\n      <td>Portugal</td>\n      <td>Ghana</td>\n      <td>3:2</td>\n      <td>90</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>João Cancelo</td>\n      <td>Manchester City</td>\n      <td>Portugal</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n# Visualisation\n\nThe aim of this visualisation was to assess the impact on various premier league teams, so we can start by aggregating by club and just adding up all the minutes.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nclub_minutes = prem_world_cup_minutes_df.groupby(['club']).sum(numeric_only=True)\n_ = club_minutes.plot(kind='barh')\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-12-output-1.png){width=749 height=411}\n:::\n:::\n\n\nThis plot seems a bit bare, and it misses context around the distribution of the minutes amongst the squad. For example, Bournemouth seems to have comparable minutes played with Brentford, but Bournemouth were represented by just one player (Phillip Billing of Denmark) vs Brentford who had 4 different players at the World Cup. You could argue the impact to Brentford is greater since Bournemouth can just rest Billing for a game or two, whereas resting 5 players is a taller order for Brentford. \n\n## Grouping by country\n\n::: {.cell .column-page execution_count=12}\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-13-output-1.png){width=1058 height=535}\n:::\n:::\n\n\nThis seems to be committing the sin of way too much data in one plot, there aren't enough colours to differentiate between the countries, even if we could - the country name isn't particularly meaningful.\n\n## Grouping by tournament progression\n\nA more meaninful representation is to group together contries that made it to the same stages of the tournament. The progression through the world cup rounds indicates how much rest the players have had and also provideds reasons behind the number of minutes: progressing to later rounds is likely to be the reason behind high number of minutes played.\n\n::: {.cell .column-page execution_count=13}\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-14-output-1.png){width=953 height=449}\n:::\n:::\n\n\n## Finishing touches\nSince we are exploring the impact of fatigue from the world cup, it would make sense to order the y axis (premier league teams) by league position since this is likely to be affected following the world cup.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Adding premier league standings\"}\nfrom fuzzywuzzy import process\nprem_standings = pd.read_html(\"https://www.bbc.co.uk/sport/football/tables\")[0]\nprem_standings = prem_standings.iloc[:-1, [0,2]].rename({'Unnamed: 0':'prem_position'}, axis=1).set_index('Team')\n\n# taken from https://stackoverflow.com/a/56315491\ndef fuzzy_merge(df_1, df_2, key1, key2, threshold=90, limit=2):\n    \"\"\"\n    :param df_1: the left table to join\n    :param df_2: the right table to join\n    :param key1: key column of the left table\n    :param key2: key column of the right table\n    :param threshold: how close the matches should be to return a match, based on Levenshtein distance\n    :param limit: the amount of matches that will get returned, these are sorted high to low\n    :return: dataframe with boths keys and matches\n    \"\"\"\n    s = df_2[key2].tolist()\n    \n    m = df_1[key1].apply(lambda x: process.extract(x, s, limit=limit))    \n    df_1['matches'] = m\n    \n    m2 = df_1['matches'].apply(lambda x: ', '.join([i[0] for i in x if i[1] >= threshold]))\n    df_1['matches'] = m2\n    \n    return df_1\ndf = df.reset_index()\nprem_standings = prem_standings.reset_index()\nmerged_standings = fuzzy_merge(df, prem_standings, key1='club', key2='Team', threshold=65, limit=1)\nmerged_standings.loc[merged_standings['club']==\"Manchester United\", 'matches'] = 'Man Utd'\nmerged_standings = merged_standings.merge(prem_standings, how='left', left_on='matches', right_on='Team').drop(['matches', 'Team'], axis=1)\nmerged_standings['prem_position'] = pd.to_numeric(merged_standings['prem_position'])\nmerged_standings.sort_values('prem_position', inplace=True, ascending=False)\n\ndf = merged_standings.drop(\"prem_position\", axis=1).set_index(\"club\")\n```\n:::\n\n\nWe can change the colour scheme so it matches the world cup one, change the fonts, add some spacing and we end up with our final plot:\n\n::: {.cell .column-screen-inset execution_count=15}\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-16-output-1.png){width=1472 height=701}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}