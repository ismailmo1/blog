---
title: Does Darwin Nunez only score difficult chances?
description: Analysing expected goals (xG) of missed chances and scored goals. 
date: 01-15-2023
categories:
  - python
  - pandas
  - matplotlib
  - data-viz
  - football
  - premier league
image: nunez_chaos.webp
format:
    html:
        toc: true
        toc-location: left
        number-sections: true
        code-line-numbers: true
        fig-width: 7
        fig-height: 5
jupyter: python3
execute:
    warning: false
---

Since Darwin Nunez joined Liverpool in the summer of 2022 his finishing has been questioned by some, despite his 10 goals in 23 games (at the time of writing). Some of this criticism is likely due to the inevitable comparison with Manchester City's summer signing of Erling Haaland with 27 goals in 24 games so far. However, it feels as though Nunez loses his composure in front of goals with easier chances, but looks calmer with more difficult chances when he isn't expected to score.

To put this "feeling" to the test, we can look at the difficulty of chances that are scored vs ones that are missed with the help of the [expected goals (xG)](https://fbref.com/en/expected-goals-model-explained/) metric.

## Data source

To help make a judgement on the quality of chances missed vs scored, xG data was required at the finest granularity level: each individual shot by a player.  

You can read about how data was scraped from [fbref](fbref.com) while still respecting the API limits [here](blog.ismailmo.com).
```{python}
#| echo: false
import os
import sys
from httpx import AsyncClient
import re
import json
import asyncio
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import pandas as pd
module_path = os.path.abspath(os.path.join('../transfermarket/'))
sys.path.append(module_path)
```

```{python}
#| echo: false
players = {
    'Cody Gakpo': 'gakpo',
    'Luis Díaz': 'diaz',
    'Diogo Jota': 'jota',
    'Mohamed Salah': 'salah',
    'Roberto Firmino': 'firmino',
    'Darwin Núñez':'nunez'
    }
dfs =[]

for player_name, shortname in players.items():
    match_shots = pd.read_csv(f"data/{shortname}_shot_data.csv")
    matches = pd.read_csv(f"data/{shortname}_match_data.csv")

    match_shots.dropna(subset=['Player','xG'], inplace=True)
    match_shots['Player'] = match_shots['Player'].apply(lambda x:x.split(" (pen)")[0])
    matches.set_index('Unnamed: 0', inplace=True)
    match_shots.set_index('date', inplace=True)
    match_shots = match_shots.join(matches, how='left')
    match_shots = match_shots[match_shots['Player']==player_name]

    match_shots['date'] = match_shots.index
    dfs.append(match_shots)

concat_shots = pd.concat(dfs).loc[:,['Minute', 'Player', 'xG', 'Outcome', 'Venue', 'Result', 'Squad', 'Opponent']]
concat_shots = concat_shots.dropna(axis=0).drop_duplicates()
concat_shots = concat_shots.assign(is_goal=concat_shots['Outcome']=='Goal')

player_goals = concat_shots[concat_shots['is_goal']]
concat_shots.iloc[:, [0,1,2,3, 8]].sample(5)
```
## Visualising all shots
Finding a balance between visualising all the individual shot data points and not making the plot too busy was the key goal of this visualisation. By using text annotations in both the y axis and the median lines - I think this is a decent tradeoff. 

```{python}
#| column: screen
#| echo: false

median_goal_xg = player_goals.groupby('Player').median(numeric_only=True).reset_index()

player_xg_order = median_goal_xg.sort_values('xG')['Player'].to_list()

import matplotlib
from matplotlib.lines import Line2D
matplotlib.rcParams['font.family'] = 'JetBrains Mono'
fig, ax = plt.subplots(figsize=(20,10))


sns.stripplot(concat_shots[concat_shots['is_goal']==False],x= 'xG', y='Player', ax=ax, alpha=0.3, s=10, color='grey', order= player_xg_order)
sns.stripplot(concat_shots[concat_shots['is_goal']==True],x= 'xG', y='Player', ax=ax, s=10, color='red', order= player_xg_order)

ax.tick_params(length=0)
ax.set_title("Expected Goals (xG) of shots since 2020/2021*", loc="left", pad=80, fontdict={'size':30})
ax.set_ylabel("")

ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.spines['bottom'].set_visible(False)
ax.spines['left'].set_visible(False)

# 'best', 'upper right', 'upper left', 'lower left', 'lower right', 'right', 'center left', 'center right', 'lower center', 'upper center', 'center'
ax.legend(handles = [ 
                Line2D([0], [0], marker='o', color='r', label='Goal', linewidth=0,
                        markersize=15),
                Line2D([0], [0], color='#1f77b4', label='Avg goal xG', linewidth=4,alpha =0.5,
                        markersize=15)
                    ], 
                    frameon=False, 
                    fontsize=16, 
                    loc='upper center',
                    ncol=2,
                    bbox_to_anchor=(0.5,1.08)
            )
data_disclaimer = "*xG data is not available for all competitions"
_ = plt.gcf().text(0.05, 0.0, data_disclaimer, fontsize=14, fontdict={'color':  'black'}, ha="left")
_ = plt.gcf().text(0.9, 0.00, "ismailmo.com", fontsize=18, fontdict={'color':  'blue'}, ha="right")
_ = plt.gcf().text(0.9, -0.02, "data: fbref.com", fontsize=14.25, fontdict={'color':  'blue'}, ha="right")

# add avg goal xG line
tick_label_order = [label._text for label in ax.get_yticklabels()]
annotation_pos = [(idx,median_goal_xg[median_goal_xg['Player']==tick]['xG'].squeeze()) for idx, tick in enumerate(tick_label_order)]

num_y_labels = len(annotation_pos)
for y,x in annotation_pos:
    y_loc = 1- (y/num_y_labels)
    y_width = 1/num_y_labels
    line_height = 1/(num_y_labels+1)

    ax.axvline(x,ymin = y_loc-line_height, ymax = y_loc - y_width + line_height, color='#1f77b4', linewidth = 4, alpha=0.5)
    offset = 10
    ax.annotate(f"{x:.2f}", (x,y), xytext=(offset/2, 2*offset), textcoords='offset points')


ax.tick_params(axis='y', which='major', labelsize=15)
ax.xaxis.label.set_fontsize(16)

for idx, label in enumerate(tick_label_order):
        num_shots = len(concat_shots[concat_shots['Player']==label])
        num_goals = len(player_goals[player_goals['Player']==label])
        shots_per_goal = num_shots/num_goals
        ax.annotate(f"shots: {num_shots}\ngoals: {num_goals}\nshots/goal: {shots_per_goal:.2f}", 
                xy=(-0.05,idx + 0.33), xycoords='data', annotation_clip=False, horizontalalignment='right')

_ = ax.set_yticklabels(ax.get_yticklabels(), va='bottom')
```
## Adding contextual data
There are a few interesting data points in the plot above, so it would be cool to be able to search up the goal or missed shot - e.g. the Cody Gakpo goal with an xG of ~0.01 or the chance Luis Diaz missed with an xG of ~0.95. 

The static plot is already at the limits of how noisy I would want to get, but we can use an interactive plotting tool like [plotly](https://plotly.com/python/) to add more data without ruining the simplicity of the plot.

First we can add the match data:
```{python}
concat_shots = concat_shots.reset_index().rename({'index':'date'}, axis=1)
concat_shots.sample(5)
```
The plot the data using `plotly.express.stripplot`:
```{python}
#| echo: false
#| column: screen
import plotly.graph_objects as go
fig = px.strip(
    concat_shots, 
    x='xG',
    y='Player',
    color='is_goal',
    color_discrete_sequence=['rgba(255, 0, 0, 0.3)', 'rgba(0, 0, 0, 0.3)'],
    width=2000,
    height=1000,
    stripmode='group',
    range_x=[0,1],
    hover_data= {
        'date':True,
        'Minute': True,
        'is_goal':False,
        'Player': False,
        'xG': True,
        'Outcome': True,
        'Venue': True,
        'Result': True,
        'Squad': True,
        'Opponent': True,
    },
    title="Expected goals (xG) of shots from Liverpool's forwards"
    )

fig.update_layout(font_family='JetBrains Mono', title_font_size = 42, legend_orientation="h", legend_x = 0.5, legend_xanchor="center", legend_y=1, legend_yanchor="bottom")
fig.update_yaxes(title="", tickfont={"size":16} )
fig.update_xaxes(title_font_size=32)
fig.for_each_trace(lambda t: t.update({"marker":{"size":10}}))
```
## How about just shots at Liverpool?
```{python}
concat_shots['Squad'] = concat_shots['Squad'].apply(lambda x:x.split(" ")[-1])
lpool_shots = concat_shots[concat_shots['Squad']=='Liverpool']
lpool_shots.sample(5)
```

```{python}
lpool_goals = lpool_shots[lpool_shots["is_goal"]==True]
median_goal_xg = lpool_goals.groupby('Player').median(numeric_only=True).reset_index()

player_xg_order = median_goal_xg.sort_values('xG')['Player'].to_list()

import matplotlib
from matplotlib.lines import Line2D
matplotlib.rcParams['font.family'] = 'JetBrains Mono'
fig, ax = plt.subplots(figsize=(20,10))


sns.stripplot(lpool_shots[lpool_shots['is_goal']==False],x= 'xG', y='Player', ax=ax, alpha=0.3, s=10, color='grey', order= player_xg_order)
sns.stripplot(lpool_shots[lpool_shots['is_goal']==True],x= 'xG', y='Player', ax=ax, s=10, color='red', order= player_xg_order)

ax.tick_params(length=0)
ax.set_title("Expected Goals (xG) of shots since 2020/2021*", loc="left", pad=80, fontdict={'size':30})
ax.set_ylabel("")

ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.spines['bottom'].set_visible(False)
ax.spines['left'].set_visible(False)

# 'best', 'upper right', 'upper left', 'lower left', 'lower right', 'right', 'center left', 'center right', 'lower center', 'upper center', 'center'
ax.legend(handles = [ 
                Line2D([0], [0], marker='o', color='r', label='Goal', linewidth=0,
                        markersize=15),
                Line2D([0], [0], color='#1f77b4', label='Avg goal xG', linewidth=4,alpha =0.5,
                        markersize=15)
                    ], 
                    frameon=False, 
                    fontsize=16, 
                    loc='upper center',
                    ncol=2,
                    bbox_to_anchor=(0.5,1.08)
            )
data_disclaimer = "*xG data is not available for all competitions"
_ = plt.gcf().text(0.05, 0.0, data_disclaimer, fontsize=14, fontdict={'color':  'black'}, ha="left")
_ = plt.gcf().text(0.9, 0.00, "ismailmo.com", fontsize=18, fontdict={'color':  'blue'}, ha="right")
_ = plt.gcf().text(0.9, -0.02, "data: fbref.com", fontsize=14.25, fontdict={'color':  'blue'}, ha="right")

# add avg goal xG line
tick_label_order = [label._text for label in ax.get_yticklabels()]
annotation_pos = [(idx,median_goal_xg[median_goal_xg['Player']==tick]['xG'].squeeze()) for idx, tick in enumerate(tick_label_order)]

num_y_labels = len(annotation_pos)
for y,x in annotation_pos:
    y_loc = 1- (y/num_y_labels)
    y_width = 1/num_y_labels
    line_height = 1/(num_y_labels+1)

    ax.axvline(x,ymin = y_loc-line_height, ymax = y_loc - y_width + line_height, color='#1f77b4', linewidth = 4, alpha=0.5)
    offset = 10
    ax.annotate(f"{x:.2f}", (x,y), xytext=(offset/2, 2*offset), textcoords='offset points')


ax.tick_params(axis='y', which='major', labelsize=15)
ax.xaxis.label.set_fontsize(16)

for idx, label in enumerate(tick_label_order):
        num_shots = len(lpool_shots[lpool_shots['Player']==label])
        num_goals = len(lpool_goals[lpool_goals['Player']==label])
        shots_per_goal = num_shots/num_goals
        ax.annotate(f"shots: {num_shots}\ngoals: {num_goals}\nshots/goal: {shots_per_goal:.2f}", 
                xy=(-0.05,idx + 0.33), xycoords='data', annotation_clip=False, horizontalalignment='right')

_ = ax.set_yticklabels(ax.get_yticklabels(), va='bottom')
```
